import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage
import com.bmuschko.gradle.docker.tasks.image.DockerPushImage
import com.bmuschko.gradle.docker.tasks.image.DockerTagImage

version = '0.1.0-SNAPSHOT'

ext {
    imageName = imagePrefix + '/minimesos'
}

tasks.withType(JavaCompile) {
    options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
}

repositories {
    mavenLocal()
    mavenCentral()
    maven {
        url "https://jitpack.io"
    }
}

apply plugin: "groovy"
apply plugin: 'java'
apply plugin: 'jacoco'
apply plugin: 'maven'
apply plugin: 'application'
apply plugin: 'com.bmuschko.docker-remote-api'

sourceCompatibility = '1.8'
targetCompatibility = '1.8'
version = rootProject.version.toString()

[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

group = "com.containersol.minimesos"

configurations {
    provided {
        dependencies.all { dep ->
            configurations.default.exclude group: dep.group, module: dep.name
        }
    }
    compile.extendsFrom provided
}

dependencies {
    provided 'org.projectlombok:lombok:1.16.8'

    compile 'org.codehaus.groovy:groovy-all:2.4.5'
    compile 'com.github.docker-java:docker-java:4f094c112'
    compile 'junit:junit:4.11'
    compile 'com.jayway.awaitility:awaitility:1.6.3'
    compile 'com.mashape.unirest:unirest-java:1.4.8'

    compile 'org.slf4j:jcl-over-slf4j:1.7.12'
    compile 'org.slf4j:log4j-over-slf4j:1.7.12'
    compile 'org.slf4j:jul-to-slf4j:1.7.12'

    compile 'org.slf4j:slf4j-api:1.7.12'

    compile 'ch.qos.logback:logback-core:1.1.3'
    compile 'ch.qos.logback:logback-classic:1.1.3'

    compile 'com.beust:jcommander:1.48'

    testCompile "org.mockito:mockito-core:1.+"
}

sourceSets {
    main {
        groovy {
            // this makes the groovy-compiler compile groovy- as well as java-files.
            // Needed, because java is normally compiled before groovy.
            // Since we are using groovy objects from java, we need it the other way round.
            srcDirs = ['src/main/groovy', 'src/main/java']
        }
        java {
            srcDirs = [] // don't compile Java code twice
        }
    }
}

mainClassName = "com.containersol.minimesos.main.Main"

jar {
    baseName = "minimesos"
    manifest {
        attributes(
                'Main-Class': mainClassName,
                'Implementation-Version': project.version
        )
    }
    exclude 'META-INF/*.RSA', 'META-INF/*.SF', 'META-INF/*.DSA'
}

jacocoTestReport {
    reports {
        xml.enabled true
        csv.enabled false
    }
}

task executableJar(type: Jar) {
    baseName = "minimesos"
    classifier = "all"
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
    manifest {
        attributes(
                'Main-Class': mainClassName,
                'Implementation-Version': project.version
        )
    }
    exclude 'META-INF/*.RSA', 'META-INF/*.SF', 'META-INF/*.DSA'
}

task installMinimesosScript(type: Copy) {
    from "$rootDir/bin/minimesos"
    into "/usr/local/bin"
}

task copyExecutableJar(type: Copy) {
    dependsOn 'executableJar'
    rename { String fileName ->
        fileName.replace("-${project.version}-all", "")
    }
    from "build/libs/minimesos-${project.version}-all.jar"
    into 'build/libs'
}

task copyFilesForDocker(type: Copy) {
    dependsOn 'copyExecutableJar'
    from "build/libs/minimesos.jar"
    into 'build/docker'
    rename { String fileName ->
        fileName.replace("-${project.version}", "")
    }
}

task copyDockerfile(type: Copy) {
    dependsOn 'copyFilesForDocker'
    from "Dockerfile"
    into 'build/docker'
}

artifacts {
    archives executableJar
}

test {
    testLogging {
        showStandardStreams = true
    }
}

afterEvaluate { project ->
    if (new File(project.projectDir, 'Dockerfile').exists()) {
        if (!project.hasProperty('imageName')) {
            throw new GradleException('Root directory of ' + project.name
                    + ' contains Dockerfile, but it does not define project.ext.imageName value')
        }
        docker.url = 'unix:///var/run/docker.sock'
        if (!System.properties['os.name'].equals('Mac OS X')) {
            docker.certPath = null
        }
        if (System.env.DOCKER_HOST) {
            docker.url = "$System.env.DOCKER_HOST".replace("tcp", "https")
            if (System.env.DOCKER_CERT_PATH) {
                docker.certPath = new File(System.env.DOCKER_CERT_PATH)
            }
        }
        task buildDockerImage(type: DockerBuildImage, dependsOn: [copyDockerfile], description: 'build Docker image') {
            inputDir = new File("${buildDir}/docker")
            tag = project.imageName
        }
        project.build.dependsOn buildDockerImage
        ['snapshot', 'version'].each { aTag ->
            String uppercasedName = aTag.capitalize()
            task "tagDockerImageWith$uppercasedName"(type: DockerTagImage, description: 'tag Docker image') {
                imageId = project.imageName
                tag = ('version'.equals(aTag)) ? project.version : aTag
                repository = project.imageName
                force = true
            }
            task "publishDockerImageWith$uppercasedName"(type: DockerPushImage, dependsOn: ["tagDockerImageWith$uppercasedName"],
                    description: 'publish Docker image') {
                imageName = project.imageName
                tag = ('version'.equals(aTag)) ? project.version : aTag
                doFirst {
                    ['dockerHubUsername', 'dockerHubPassword', 'dockerHubEmail'].each {
                        assert project.hasProperty(it): 'Undefined "' + it + '" property'
                    }
                    docker {
                        registryCredentials {
                            username = project.property('dockerHubUsername')
                            password = project.property('dockerHubPassword')
                            email = project.property('dockerHubEmail')
                        }
                    }
                }
            }
        }
    }
}

assemble.dependsOn copyExecutableJar
// install.dependsOn installMinimesosScript
